generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(cuid())
  fullName  String?
  phone     String?
  timezone  String   @default("Asia/Kolkata")
  currency  String   @default("INR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Trade {
  id                      String              @id @default(cuid())
  tradeType               TradeType           @default(INTRADAY)
  entryDate               DateTime
  entryPrice              Float
  quantity                Int
  position                PositionType
  symbol                  String
  instrument              InstrumentType
  exitDate                DateTime?
  exitPrice               Float?
  holdingDuration         Int?
  entryValue              Float
  exitValue               Float?
  turnover                Float
  grossPnl                Float?
  netPnl                  Float?
  totalCharges            Float?
  percentageReturn        Float?
  stopLoss                Float?
  target                  Float?
  riskAmount              Float?
  rewardAmount            Float?
  riskRewardRatio         Float?
  confidenceLevel         Int?
  emotionalState          String?
  marketCondition         String?
  planning                String?
  followedRiskReward      Boolean?
  followedIntradayHunter  Boolean?
  overtrading             Boolean?
  waitedForRetracement    Boolean?
  hadPatienceWhileExiting Boolean?
  showedGreed             Boolean?
  showedFear              Boolean?
  tradedAgainstTrend      Boolean?
  psychologyNotes         String?
  brokerName              String?
  customBrokerage         Boolean             @default(false)
  brokerageType           String?
  brokerageValue          Float?
  capitalPoolId           String?
  notes                   String?
  isDraft                 Boolean             @default(false)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  analysisTime            Int?
  copingMechanisms        String?
  decisionTime            Int?
  emotionalTriggers       String?
  energyLevel             Int?
  focusLevel              Int?
  fomoLevel               Int?
  impulsiveTrading        Boolean?
  internetIssues          Boolean?
  learningFromMistakes    Boolean?
  marketSentiment         String?
  meditationPractice      Boolean?
  newsImpact              String?
  overconfidence          Boolean?
  postTradeMood           String?
  preTradeMood            String?
  revengeTrading          Boolean?
  sleepQuality            Int?
  socialMediaInfluence    Boolean?
  strategyDeviation       String?
  stressLevel             Int?
  hedgePosition           HedgePosition?
  optionsTrade            OptionsTrade?
  attachments             TradeAttachment[]
  charges                 TradeCharge[]
  emotionalTags           TradeEmotionalTag[]
  marketTags              TradeMarketTag[]
  strategyTags            TradeStrategyTag[]
  capitalPool             CapitalPool?        @relation(fields: [capitalPoolId], references: [id])

  @@map("trades")
}

model OptionsTrade {
  id          String     @id @default(cuid())
  tradeId     String     @unique
  optionType  OptionType
  strikePrice Float
  expiryDate  DateTime
  lotSize     Int        @default(50)
  underlying  String
  trade       Trade      @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@map("options_trades")
}

model HedgePosition {
  id               String        @id @default(cuid())
  tradeId          String        @unique
  position         PositionType
  entryDate        DateTime
  entryPrice       Float
  quantity         Int
  exitDate         DateTime?
  exitPrice        Float?
  entryValue       Float
  exitValue        Float?
  grossPnl         Float?
  netPnl           Float?
  totalCharges     Float?
  percentageReturn Float?
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  charges          HedgeCharge[]
  trade            Trade         @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@map("hedge_positions")
}

model HedgeCharge {
  id            String        @id @default(cuid())
  hedgeId       String
  chargeType    ChargeType
  rate          Float
  baseAmount    Float
  amount        Float
  description   String?
  createdAt     DateTime      @default(now())
  hedgePosition HedgePosition @relation(fields: [hedgeId], references: [id], onDelete: Cascade)

  @@map("hedge_charges")
}

model TradeCharge {
  id          String     @id @default(cuid())
  tradeId     String
  chargeType  ChargeType
  rate        Float
  baseAmount  Float
  amount      Float
  description String?
  createdAt   DateTime   @default(now())
  trade       Trade      @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@map("trade_charges")
}

model StrategyTag {
  id          String             @id @default(cuid())
  name        String             @unique
  color       String             @default("#3B82F6")
  description String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  trades      TradeStrategyTag[]

  @@map("strategy_tags")
}

model EmotionalTag {
  id          String              @id @default(cuid())
  name        String              @unique
  color       String              @default("#8B5CF6")
  description String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  trades      TradeEmotionalTag[]

  @@map("emotional_tags")
}

model MarketTag {
  id          String           @id @default(cuid())
  name        String           @unique
  color       String           @default("#10B981")
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  trades      TradeMarketTag[]

  @@map("market_tags")
}

model TradeStrategyTag {
  tradeId       String
  strategyTagId String
  strategyTag   StrategyTag @relation(fields: [strategyTagId], references: [id], onDelete: Cascade)
  trade         Trade       @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@id([tradeId, strategyTagId])
  @@map("trade_strategy_tags")
}

model TradeEmotionalTag {
  tradeId        String
  emotionalTagId String
  emotionalTag   EmotionalTag @relation(fields: [emotionalTagId], references: [id], onDelete: Cascade)
  trade          Trade        @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@id([tradeId, emotionalTagId])
  @@map("trade_emotional_tags")
}

model TradeMarketTag {
  tradeId     String
  marketTagId String
  marketTag   MarketTag @relation(fields: [marketTagId], references: [id], onDelete: Cascade)
  trade       Trade     @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@id([tradeId, marketTagId])
  @@map("trade_market_tags")
}

model TradeAttachment {
  id        String   @id @default(cuid())
  tradeId   String
  fileName  String
  filePath  String
  fileSize  Int
  fileType  String
  createdAt DateTime @default(now())
  trade     Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@map("trade_attachments")
}

model Position {
  id                   String         @id @default(cuid())
  symbol               String
  instrument           InstrumentType
  position             PositionType
  quantity             Int
  avgEntryPrice        Float
  currentPrice         Float?
  unrealizedPnl        Float?
  unrealizedPnlPercent Float?
  daysHeld             Int?
  stopLoss             Float?
  target               Float?
  riskAmount           Float?
  isActive             Boolean        @default(true)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  @@map("positions")
}

model CapitalPool {
  id             String               @id @default(cuid())
  name           String
  poolType       PoolType             @default(TOTAL)
  initialAmount  Float
  currentAmount  Float
  totalInvested  Float                @default(0)
  totalWithdrawn Float                @default(0)
  totalPnl       Float                @default(0)
  isActive       Boolean              @default(true)
  description    String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  transactions   CapitalTransaction[]
  trades         Trade[]

  @@map("capital_pools")
}

model CapitalTransaction {
  id              String          @id @default(cuid())
  poolId          String
  transactionType TransactionType
  amount          Float
  description     String?
  referenceId     String?
  referenceType   String?
  balanceAfter    Float
  createdAt       DateTime        @default(now())
  pool            CapitalPool     @relation(fields: [poolId], references: [id], onDelete: Cascade)

  @@map("capital_transactions")
}

model StockSymbol {
  id          String   @id @default(cuid())
  symbol      String   @unique
  companyName String
  industry    String?
  series      String   @default("EQ")
  isinCode    String?
  isActive    Boolean  @default(true)
  source      String   @default("MANUAL")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("stock_symbols")
}

model CsvImportTemplate {
  id            String      @id @default(cuid())
  name          String
  description   String?
  headers       Json
  columnMapping Json
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  imports       CsvImport[]

  @@map("csv_import_templates")
}

model CsvImport {
  id              String             @id @default(cuid())
  templateId      String?
  fileName        String
  originalHeaders Json
  columnMapping   Json
  totalRows       Int
  processedRows   Int
  successRows     Int
  errorRows       Int
  duplicateRows   Int
  status          String             @default("PENDING")
  errorMessage    String?
  createdAt       DateTime           @default(now())
  completedAt     DateTime?
  template        CsvImportTemplate? @relation(fields: [templateId], references: [id])

  @@map("csv_imports")
}

model AppSettings {
  id                   String         @id @default(cuid())
  defaultInstrument    InstrumentType @default(EQUITY)
  defaultPosition      PositionType   @default(BUY)
  defaultLotSize       Json?
  autoCalculateCharges Boolean        @default(true)
  requireStrategyTag   Boolean        @default(false)
  currencySymbol       String         @default("₹")
  decimalPlaces        Int            @default(2)
  thousandsSeparator   String         @default("comma")
  dateFormat           String         @default("DD/MM/YYYY")
  timeFormat           String         @default("24")
  theme                String         @default("light")
  defaultPageSize      Int            @default(50)
  denseMode            Boolean        @default(false)
  zebraStriping        Boolean        @default(true)
  stickyHeaders        Boolean        @default(true)
  autoRefresh          Boolean        @default(true)
  defaultExportFormat  String         @default("excel")
  includeFilters       Boolean        @default(true)
  includeCharts        Boolean        @default(true)
  fileNamingTemplate   String         @default("TradeJournal_YYYY-MM-DD")
  keepTradeHistory     String         @default("forever")
  autoBackupFrequency  String         @default("weekly")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  @@map("app_settings")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@map("audit_logs")
}

model Prediction {
  id              String               @id @default(cuid())
  predictionDate  DateTime
  strategy        String
  direction       PredictionDirection
  strategyNotes   String?
  confidence      Int
  notes           String?
  status          PredictionStatus     @default(PENDING)
  result          PredictionResult?
  actualDirection PredictionDirection?
  actualNotes     String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@map("predictions")
}

enum TradeType {
  INTRADAY
  POSITIONAL
}

enum PositionType {
  BUY
  SELL
}

enum InstrumentType {
  EQUITY
  FUTURES
  OPTIONS
}

enum OptionType {
  CALL
  PUT
}

enum ChargeType {
  BROKERAGE
  STT
  EXCHANGE
  SEBI
  STAMP_DUTY
  CUSTOM
}

enum PoolType {
  TOTAL
  EQUITY
  FNO
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PROFIT
  LOSS
  TRANSFER_IN
  TRANSFER_OUT
}

enum PredictionStatus {
  PENDING
  PASSED
  FAILED
}

enum PredictionResult {
  SUCCESS
  FAILURE
}

enum PredictionDirection {
  BULLISH
  BEARISH
  NEUTRAL
}
